{"version":3,"file":"static/js/55.9450adc7.chunk.js","mappings":"4SA8CA,EA/BuBA,IAOhB,IAPiB,KACtBC,EAAI,IACJC,EAAG,IACHC,EAAG,YACHC,EAAW,SACXC,GAEDL,GADcM,EAAAA,EAAAA,GAAAN,EAAAO,GAEb,OACEC,EAAAA,EAAAA,MAACC,EAAAA,GAAQ,CAAAC,SAAA,EACPF,EAAAA,EAAAA,MAACG,EAAAA,EAAY,CAAAD,SAAA,CACVT,EACAI,IACCO,EAAAA,EAAAA,KAACC,EAAAA,EAAI,CACHC,KAAK,QACLC,GAAI,CAAEC,GAAI,GACVC,MAAK,GAAAC,QAAKC,EAAAA,EAAAA,IAAO,OAAPA,CAAed,GAAS,YAIvCD,IACCQ,EAAAA,EAAAA,KAACQ,EAAAA,EAAU,CAACC,UAAU,IAAIC,KAAI,OAAAJ,OAASd,GAAcM,UACnDE,EAAAA,EAAAA,KAACW,EAAAA,IAAM,OAGXX,EAAAA,EAAAA,KAACQ,EAAAA,EAAU,CAACI,QAASA,IAnCDC,EAACvB,EAAKC,KAG9BuB,QAAQC,IACN,4CAA4C,QAADT,OACnChB,EAAG,WAAAgB,OAAUf,IAEvByB,cAAc,IAAIC,YAAY,aAAc,CAAEC,OAAQ,CAAE5B,MAAKC,SAAS,EA4BvCsB,CAAkBvB,EAAKC,GAAKO,UACrDE,EAAAA,EAAAA,KAACmB,EAAAA,IAAmB,QAEb,ECzBf,EAdwB/B,IAAiC,IAAhC,QAAEgC,EAAO,OAAEC,EAAS,MAAMjC,EACjD,OACEQ,EAAAA,EAAAA,MAAC0B,EAAAA,EAAI,CAACnB,GAAI,CAAEoB,UAAW,sBAAuBC,UAAW,QAAS1B,SAAA,EAChEE,EAAAA,EAAAA,KAACqB,EAAM,CAAOD,YACbC,IAAUrB,EAAAA,EAAAA,KAACyB,EAAAA,EAAO,IAIlBL,EAAQM,KAAI,CAACC,EAAQC,KACpBC,EAAAA,EAAAA,eAACC,GAAcC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAKJ,GAAM,IAAEK,IAAKJ,SAE9B,C,yKCPX,MAiCA,EAjCwBK,KACtB,MAAM,YAAEC,EAAW,YAAEC,IAAgBC,EAAAA,EAAAA,KAC/BC,EAAYC,EAAAA,EAAWJ,GAE7B,OACElC,EAAAA,EAAAA,KAACuC,EAAAA,EAAa,CAACpC,GAAI,CAAEqC,GAAI,GAAI1C,UAC3BF,EAAAA,EAAAA,MAAC6C,EAAAA,EAAK,CAACC,UAAU,MAAMC,eAAe,gBAAe7C,SAAA,EACnDE,EAAAA,EAAAA,KAACQ,EAAAA,EAAU,CAACC,UAAWmC,EAAAA,GAAYC,GAAG,IAAG/C,UACvCE,EAAAA,EAAAA,KAAC8C,EAAAA,IAAkB,MAEX,OAATT,QAAS,IAATA,GAAAA,EAAWU,SACV/C,EAAAA,EAAAA,KAAA,OAAKgD,MAAO,CAAEC,OAAQ,OAAQnD,UAC5BE,EAAAA,EAAAA,KAAA,OACEkD,IAAc,OAATb,QAAS,IAATA,OAAS,EAATA,EAAWU,QAChBI,IAAG,GAAA7C,OAAK+B,EAAUe,WAAU,SAC5BH,OAAO,YAIXjD,EAAAA,EAAAA,KAACqD,EAAAA,EAAU,CAAClD,GAAI,CAAEmD,UAAW,UAAWxD,SACrB,gBAAhBoC,EACG,eACS,OAATG,QAAS,IAATA,OAAS,EAATA,EAAWhD,QAAiB,OAATgD,QAAS,IAATA,OAAS,EAATA,EAAWe,cAAuB,OAATf,QAAS,IAATA,OAAS,EAATA,EAAWkB,OAG/D3D,EAAAA,EAAAA,MAACY,EAAAA,EAAU,CAACgD,UAAQ,EAAA1D,SAAA,CACD,OAAhBqC,IAAwBnC,EAAAA,EAAAA,KAACyD,EAAAA,IAAW,IACpB,OAAhBtB,IAAwBnC,EAAAA,EAAAA,KAAC0D,EAAAA,IAAM,WAGtB,E,cC/BpB,MAYA,EAZ6BC,KAC3B,MAAM,YAAEzB,EAAW,YAAEC,IAAgBC,EAAAA,EAAAA,KAC/BwB,GAAkBC,EAAAA,EAAAA,UAAQ,IACvBC,EAAAA,EAAWC,QACfpC,IACkB,gBAAhBO,GAAiCP,EAAOU,YAAcH,IACvDP,EAAOQ,cAAgBA,KAE1B,CAACD,EAAaC,IAEjB,OAAOnC,EAAAA,EAAAA,KAACgE,EAAAA,EAAc,CAAC5C,QAASwC,EAAiBvC,OAAQY,GAAmB,C","sources":["components/CinemaList/CinemaListItem.jsx","components/CinemaList/BaseCinemaList.jsx","components/CinemaList/FranchiseHeader.jsx","components/CinemaList/FranchiseCinemasList.jsx"],"sourcesContent":["import { Chip, IconButton, ListItem, ListItemText } from \"@mui/material\";\nimport { MdCall, MdOutlineLocationOn } from \"react-icons/md\";\nimport { format } from \"d3-format\";\nimport React from \"react\";\n\nconst dispatchMapSnapTo = (lat, lng) => {\n  // This will dispatch the `map.snapTo` event which will trigger a listener on the\n  // respective active map component to zoom to the latitude and longitude passed\n  console.log(\n    \"triggering `map.snapTo` event with args: \",\n    `lat: ${lat}, lng: ${lng}`\n  );\n  dispatchEvent(new CustomEvent(\"map.snapTo\", { detail: { lat, lng } }));\n};\n\nconst CinemaListItem = ({\n  name,\n  lat,\n  lng,\n  phoneNumber,\n  distance,\n  ...otherProps\n}) => {\n  return (\n    <ListItem>\n      <ListItemText>\n        {name}\n        {distance && (\n          <Chip\n            size=\"small\"\n            sx={{ ml: 1 }}\n            label={`${format(\",.1f\")(distance)} km`}\n          />\n        )}\n      </ListItemText>\n      {phoneNumber && (\n        <IconButton component=\"a\" href={`tel:${phoneNumber}`}>\n          <MdCall />\n        </IconButton>\n      )}\n      <IconButton onClick={() => dispatchMapSnapTo(lat, lng)}>\n        <MdOutlineLocationOn />\n      </IconButton>\n    </ListItem>\n  );\n};\nexport default CinemaListItem;\n","import { List, Divider } from \"@mui/material\";\nimport CinemaListItem from \"./CinemaListItem\";\nimport React from \"react\";\n\nconst CinemaListAside = ({ cinemas, Header = null }) => {\n  return (\n    <List sx={{ maxHeight: \"calc(100vh - 112px)\", overflowY: \"auto\" }}>\n      <Header {...{ cinemas }} />\n      {Header && <Divider />}\n      {/* NOTE: potential future feature of adding frontend sorting */}\n      {/* NOTE: this currently doesn't handle the case of cinemas array being empty\n                (poential caused by manually manipulated url arguments) */}\n      {cinemas.map((cinema, idx) => (\n        <CinemaListItem {...cinema} key={idx} />\n      ))}\n    </List>\n  );\n};\nexport default CinemaListAside;\n","import { IconButton, ListSubheader, Typography, Stack } from \"@mui/material\";\nimport { GiAustralia, GiFern } from \"react-icons/gi\";\nimport { MdOutlineArrowBack } from \"react-icons/md\";\nimport { Link as RouterLink } from \"react-router-dom\";\nimport { useParams } from \"react-router-dom\";\nimport franchises from \"../../data/franchises\";\nimport React from \"react\";\n\nconst FranchiseHeader = () => {\n  const { franchiseId, countryCode } = useParams();\n  const franchise = franchises[franchiseId];\n\n  return (\n    <ListSubheader sx={{ pb: 2 }}>\n      <Stack direction=\"row\" justifyContent=\"space-between\">\n        <IconButton component={RouterLink} to=\"/\">\n          <MdOutlineArrowBack />\n        </IconButton>\n        {franchise?.logoUrl ? (\n          <div style={{ height: \"3em\" }}>\n            <img\n              src={franchise?.logoUrl}\n              alt={`${franchise.identifier} logo`}\n              height=\"100%\"\n            />\n          </div>\n        ) : (\n          <Typography sx={{ alignSelf: \"center\" }}>\n            {franchiseId === \"all-cinemas\"\n              ? \"All Cinemas\"\n              : franchise?.name || franchise?.identifier || franchise?.id}\n          </Typography>\n        )}\n        <IconButton disabled>\n          {countryCode === \"au\" && <GiAustralia />}\n          {countryCode === \"nz\" && <GiFern />}\n        </IconButton>\n      </Stack>\n    </ListSubheader>\n  );\n};\nexport default FranchiseHeader;\n","import BaseCinemaList from \"./BaseCinemaList\";\nimport FranchiseHeader from \"./FranchiseHeader\";\nimport { useMemo } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport allCinemas from \"../../data/cinemas\";\nimport React from \"react\";\n\nconst FranchiseCinemasList = () => {\n  const { franchiseId, countryCode } = useParams();\n  const filteredCinemas = useMemo(() => {\n    return allCinemas.filter(\n      (cinema) =>\n        (franchiseId === \"all-cinemas\" || cinema.franchise === franchiseId) &&\n        cinema.countryCode === countryCode\n    );\n  }, [franchiseId, countryCode]);\n\n  return <BaseCinemaList cinemas={filteredCinemas} Header={FranchiseHeader} />;\n};\nexport default FranchiseCinemasList;\n"],"names":["_ref","name","lat","lng","phoneNumber","distance","_objectWithoutProperties","_excluded","_jsxs","ListItem","children","ListItemText","_jsx","Chip","size","sx","ml","label","concat","format","IconButton","component","href","MdCall","onClick","dispatchMapSnapTo","console","log","dispatchEvent","CustomEvent","detail","MdOutlineLocationOn","cinemas","Header","List","maxHeight","overflowY","Divider","map","cinema","idx","_createElement","CinemaListItem","_objectSpread","key","FranchiseHeader","franchiseId","countryCode","useParams","franchise","franchises","ListSubheader","pb","Stack","direction","justifyContent","RouterLink","to","MdOutlineArrowBack","logoUrl","style","height","src","alt","identifier","Typography","alignSelf","id","disabled","GiAustralia","GiFern","FranchiseCinemasList","filteredCinemas","useMemo","allCinemas","filter","BaseCinemaList"],"sourceRoot":""}